import random, os, logging, asyncio
from telethon import Button
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.tl.types import ChannelParticipantsAdmins
from telethon import events, Button
from telethon.tl.custom import Button
import random # pip install random
from random import randint
import configparser
from asyncio import sleep
from telethon import events
from telethon import __version__ as s
import asyncio
import os
from Config import Config 
import os, logging, asyncio
from telethon import events, Button
from telethon.sessions import StringSession
from telethon.tl.types import ChannelParticipantsAdmins
from asyncio import sleep 
from telethon import Button, events
import speedtest
# Pyrogram----------------------------------------------------------------------------------------------------
from pyrogram import Client, filters
import motor.motor_asyncio
from motor.motor_asyncio import AsyncIOMotorClient as MongoClient
import asyncio
import time
import datetime
import shutil, psutil, traceback, os
import random
import string
import traceback
import json
import aiofiles
from pyrogram import Client, filters, __version__
from pyrogram.types import Message
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os, youtube_dl, requests, time
from Config import Config
from youtube_search import YoutubeSearch
from pyrogram.handlers import MessageHandler
from pyrogram import Client, filters
import yt_dlp
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery 
from yt_dlp import YoutubeDL
from pyrogram import Client, filters
from pyrogram.types import Message
import wget
import asyncio
import random, re
import pyrogram
import os
import asyncio
from telegraph import upload_file
import pyrogram
import asyncio 
from collections import deque
from random import randint
from pyrogram import filters, Client
from pyrogram.types import Message
from platform import python_version as y
from pyrogram import __version__ as z
from pyrogram import filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import secrets
import string 
import aiohttp
from pyrogram import filters
from cryptography.fernet import Fernet
from AykhanPro.komekci import random_line
from sorular import D_Lƒ∞ST, C_Lƒ∞ST
from pyrogram import Client, idle, filters
from io import BytesIO
from aiohttp import ClientSession
import random
from random import choice
from pyrogram.types import Message
from pyrogram import idle, filters
from pyrogram import Client, filters
from pyrogram.types import ChatPermissions
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from helper.fotnt_string import Fonts
import asyncio
import random
from pyrogram.errors import (
    FloodWait,
    InputUserDeactivated,
    PeerIdInvalid,
    UserIsBlocked,
)



logging.basicConfig(
    level=logging.INFO,
    format='%(name)s - [%(levelname)s] - %(message)s'
)
LOGGER = logging.getLogger(__name__)

api_id = Config.API_ID
api_hash = Config.API_HASH
bot_token = Config.BOT_TOKEN
bot_username = Config.BOT_USERNAME
support = Config.SUPPORT_CHAT
owner = Config.OWNER_USERNAME
bot_name = Config.BOT_NAME


SUDO_USERS = Config.SUDO_USERS

OWNER_ID = Config.OWNER_ID

SUDO = Config.SUDO

temalar = [" [OldMultiBot](https://t.me/addtheme/sf158WSw7LWOtpvV) ",
" [OldMultiBot](https://t.me/addtheme/bpcrFtP4qYu0DdnJ) " ,
" [OldMultiBot](https://t.me/addtheme/aUFKCX7AQ3aQpDjp) " ,
" [OldMultiBot](https://t.me/addtheme/L7HVQjC4UUyOfL9y) " ,
" [OldMultiBot](https://t.me/addtheme/Qd4eBWTIOH4Ai3Zv) " ,
" [OldMultiBot](https://t.me/addtheme/NightWolf) " ,
" [OldMultiBot](https://t.me/addtheme/GreenBlack) " ,
" [OldMultiBot](https://t.me/addtheme/TvldPzYmpG8LqkY3) " ,
" [OldMultiBot](https://t.me/addtheme/Q4GuvNPpMvG59G6V) " ,
" [OldMultiBot](https://t.me/addtheme/kGQaW0HHsjc7oFOv) " ,
" [OldMultiBot](https://t.me/addtheme/z3E6vkceX0pfmo5P) " ,
" [OldMultiBot](https://t.me/addtheme/poMW3amfnwUwOefI) " ,
" [OldMultiBot](https://t.me/addtheme/l1felAbEVNQCN3NW) " ,
" [OldMultiBot](https://t.me/addtheme/y6xMaSuBOmuGekHj) " ,
" [OldMultiBot](https://t.me/addtheme/Fp6h6JpzXrWnjF9y) " ,
" [OldMultiBot](https://t.me/addtheme/Purple_Grapes) " ,
" [OldMultiBot](https://t.me/addtheme/xQNP1Jp2aklmldNx) " ,
" [OldMultiBot](https://t.me/addtheme/ry0AgHsISs439fxi) " ,
" [OldMultiBot](https://t.me/addtheme/ZHl93FYO9ja7hN81) " ,
" [OldMultiBot](https://t.me/addtheme/gc2MlPyKHMBjw5WS) " ,
" [Aylin](https://t.me/addtheme/ciNZt5N6QCFjsrQI) " ,
" [OldMultiBot](https://t.me/addtheme/bEKOF0v8XuLAFZ6P) " ,
" [OldMultiBot](https://t.me/addtheme/IOSTelegramThemes2020_11july) " ,
" [OldMultiBot](https://t.me/addtheme/DarkPink_1) " ,
" [OldMultiBot](https://t.me/addtheme/Halloween_04) " ,
" [OldMultiBot](https://t.me/addtheme/BlackBlue_ByYamila) " ,
" [OldMultiBot](https://t.me/addtheme/NewYorkNyVK) " ,
" [OldMultiBot](https://t.me/addtheme/blackcircles_ByYamila) " ,
" [OldMultiBot](https://t.me/addtheme/KINGByVK) " ,
" [OldMultiBot](https://t.me/addtheme/MRPERFECTBYVK) " ,
" [OldMultiBot](https://t.me/addtheme/ChanchiNeonByVK) " ,
" [OldMultiBot](https://t.me/addtheme/SamurayByVK) " ,
" [OldMultiBot](https://t.me/addtheme/NeonRocks_ByYamila) " ,
" [OldMultiBot](https://t.me/addtheme/StichOhanaByVK) " ,
" [OldMultiBot](https://t.me/addtheme/SkullDarkByVK) " ,
" [OldMultiBot](https://t.me/addtheme/RedGirlByVK) " ,
" [OldMultiBot](https://t.me/addtheme/SpidermanByVK) " ,
" [OldMultiBot](https://t.me/addtheme/CuteMelodyByVK) " ,
" [OldMultiBot](https://t.me/addtheme/YouAreBeautifulStichByVK) " ,
" [OldMultiBot](https://t.me/addtheme/ManchesterUnitedByVK) "]


ALIVE = (
    "Sahibim OLD MULTI BOT : ONLINE\n\nVERSIYA ‚ö°Ô∏è"
    f"\nv{__version__}"
)

ydl_opts = {
    'format': 'best',
    'keepvideo': True,
    'prefer_ffmpeg': False,
    'geo_bypass': True,
    'outtmpl': '%(title)s.%(ext)s',
    'quite': True
}

BUTTONS = InlineKeyboardMarkup([[InlineKeyboardButton(text="‚ûïÔ∏è GROUPA ELAVE ET", url=f"http://t.me/oldtaggerbot?startgroup=a")]])

FORCE_SUB = "TEAMABASOFcom"

#-#-#-# Pyrogram Ba≈ülanƒüƒ±c #-#-#-#
app = Client(":memory:", api_id, api_hash, bot_token=bot_token)




# Qruplara yayƒ±m mesajƒ±

############## DEƒûƒ∞≈ûKENLER ##############

DATABASE_URL = "mongodb+srv://Bots:Bots@cluster0.nedd9xs.mongodb.net/?retryWrites=true&w=majority"
BOT_USERNAME = "OldMultiBot"
LOG_CHANNEL = -1001737573985
GROUP_SUPPORT = "TEAMABASOFcom"
GONDERME_TURU = False
OWNER_ID = [5134595693]
LANGAUGE = "AZ"

#---------------------------------------------------------------GROUP GIREKEN SALAMLAMA MSJ------------------------------------------------------------------------------#
@app.on_message(filters.new_chat_members, group=1)
async def hg(bot: Client, msg: Message):
    for new_user in msg.new_chat_members:
        if str(new_user.id) == str(Config.BOT_ID):
            await msg.reply(
                f'''`Salam` {msg.from_user.mention} `M…ôni` {msg.chat.title} `Qrupa …ôlav…ô etdiyiniz √º√ß√ºn t…ô≈ü…ôkk√ºrl…ôr‚ö°Ô∏è` \n\n **ü§ñQrupda bir cox funksyalƒ± Multi botam.\nü§ñK√∂m…ôk √º√ß√ºn /start yazmaq kifay…ôtdir.‚ú®**''')
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------#


#-------------------------------------------------------------OWNERS SALAMLAMA MSJ---------------------------------------------------------------------------------------#
      
	# elif str(new_user.id) == str(Config.OWNER_ID):
      #       await msg.reply('ü§ñ [OLD MULTƒ∞](https://t.me/OldMultiBot)-un Sahibi, Qrupa Qatƒ±ldƒ±.\n Xo≈ü G…ôldin  Aramƒ±za Sahib, @AnonyumAzü•∞.')

	
	
	
#-------------------------------------------------------------VERƒ∞TABANI VERƒ∞ Gƒ∞Rƒ∞≈û √áIKI≈ûI---------------------------------------------------------------------------------------#
 
class Database: 
    def __init__(self, uri, database_name):
        self._client = motor.motor_asyncio.AsyncIOMotorClient(uri)
        self.db = self._client[database_name]
        self.col = self.db.users

    def new_user(self, id): # Veritabanƒ±na yeni kullanƒ±cƒ± ekler
        return dict(
            id=id,
            join_date=datetime.date.today().isoformat(),
            ban_status=dict(
                is_banned=False,
                ban_duration=0,
                banned_on=datetime.date.max.isoformat(),
                ban_reason="",
            ),
        )

    async def add_user(self, id): # Veritabƒ±na yeni kullanƒ±cƒ± eklemek i√ßin √∂n def
        user = self.new_user(id)
        await self.col.insert_one(user)

    async def is_user_exist(self, id): # Bir kullanƒ±cƒ±nƒ±n veritabƒ±nda olup olmadƒ±ƒüƒ±nƒ± kontrol eder.
        user = await self.col.find_one({"id": int(id)})
        return bool(user)

    async def total_users_count(self): # Veritabanƒ±ndaki toplam kullanƒ±cƒ±larƒ± sayar.
        count = await self.col.count_documents({})
        return count

    async def get_all_users(self): # Veritabƒ±ndaki t√ºm kullanƒ±cƒ±larƒ±n listesini verir.
        return self.col.find({})

    async def delete_user(self, user_id): # Veritabƒ±ndan bir kullanƒ±cƒ±yƒ± siler.
        await self.col.delete_many({"id": int(user_id)})

    async def ban_user(self, user_id, ban_duration, ban_reason): # Veritabanƒ±nƒ±zdaki bir kullanƒ±cƒ±yƒ± yasaklƒ±lar listesine ekler.
        ban_status = dict(
            is_banned=True,
            ban_duration=ban_duration,
            banned_on=datetime.date.today().isoformat(),
            ban_reason=ban_reason,
        )
        await self.col.update_one({"id": user_id}, {"$set": {"ban_status": ban_status}})

    async def remove_ban(self, id): # Veritabanƒ±nƒ±zdaki yasaklƒ±lar listesinde bulunan bir kullanƒ±cƒ±n yasaƒüƒ±nƒ± kaldƒ±rƒ±r.
        ban_status = dict(
            is_banned=False,
            ban_duration=0,
            banned_on=datetime.date.max.isoformat(),
            ban_reason="",
        )
        await self.col.update_one({"id": id}, {"$set": {"ban_status": ban_status}})

    async def get_ban_status(self, id): # Bir kullanƒ±cƒ±n veritabanƒ±nƒ±zda yasaklƒ±lar listesinde olup olmadƒ±ƒüƒ±nƒ± kontrol eder.
        default = dict(
            is_banned=False,
            ban_duration=0,
            banned_on=datetime.date.max.isoformat(),
            ban_reason="",
        )
        user = await self.col.find_one({"id": int(id)})
        return user.get("ban_status", default)

    async def get_all_banned_users(self): # Veritabƒ±nƒ±zdaki yasaklƒ± kullanƒ±cƒ±lar listesini verir.
        return self.col.find({"ban_status.is_banned": True})


db = Database(DATABASE_URL, BOT_USERNAME)
mongo_db_veritabani = MongoClient(DATABASE_URL)
dcmdb = mongo_db_veritabani.handlers



################## KULLANICI KONTROLLERƒ∞ #############
async def handle_user_status(bot: Client, cmd: Message): # Kullanƒ±cƒ± kontrol√º
    chat_id = cmd.chat.id
    if not await db.is_user_exist(chat_id):
        if cmd.chat.type == "private":
            await db.add_user(chat_id)
            await bot.send_message(LOG_CHANNEL,LAN.BILDIRIM.format(cmd.from_user.first_name, cmd.from_user.id, cmd.from_user.first_name, cmd.from_user.id))
        else:
            await db.add_user(chat_id)
            chat = bot.get_chat(chat_id)
            if str(chat_id).startswith("-100"):
                new_chat_id = str(chat_id)[4:]
            else:
                new_chat_id = str(chat_id)[1:]
            await bot.send_message(LOG_CHANNEL,LAN.GRUP_BILDIRIM.format(cmd.from_user.first_name, cmd.from_user.id, cmd.from_user.first_name, cmd.from_user.id, chat.title, cmd.chat.id, cmd.chat.id, cmd.message_id))

    ban_status = await db.get_ban_status(chat_id) # Yasaklƒ± Kullanƒ±cƒ± Kontrol√º
    if ban_status["is_banned"]:
        if int((datetime.date.today() - datetime.date.fromisoformat(ban_status["banned_on"])).days) > int(ban_status["ban_duration"]):
            await db.remove_ban(chat_id)
        else:
            if GROUP_SUPPORT:
                msj = f"@{GROUP_SUPPORT}"
            else:
                msj = f"[{LAN.SAHIBIME}](tg://user?id={OWNER_ID})"
            if cmd.chat.type == "private":
                await cmd.reply_text(LAN.PRIVATE_BAN.format(msj), quote=True)
            else:
                await cmd.reply_text(LAN.GROUP_BAN.format(msj),quote=True)
                await bot.leave_chat(cmd.chat.id)
            return
    await cmd.continue_propagation()




############### Broadcast ara√ßlarƒ± ###########
broadcast_ids = {}


async def send_msg(user_id, message): # Mesaj G√∂nderme
    try:
        if GONDERME_TURU is False:
            await message.forward(chat_id=user_id)
        elif GONDERME_TURU is True:
            await message.copy(chat_id=user_id)
        return 200, None
    except FloodWait as e:
        await asyncio.sleep(int(e.x))
        return send_msg(user_id, message)
    except InputUserDeactivated:
        return 400, f"{user_id}: {LAN.NOT_ONLINE}\n"
    except UserIsBlocked:
        return 400, f"{user_id}: {LAN.BOT_BLOCKED}\n"
    except PeerIdInvalid:
        return 400, f"{user_id}: {LAN.USER_ID_FALSE}\n"
    except Exception:
        return 500, f"{user_id}: {traceback.format_exc()}\n"

async def main_broadcast_handler(m, db): # Ana Broadcast Mantƒ±ƒüƒ±
    all_users = await db.get_all_users()
    broadcast_msg = m.reply_to_message
    while True:
        broadcast_id = "".join(random.choice(string.ascii_letters) for i in range(3))
        if not broadcast_ids.get(broadcast_id):
            break
    out = await m.reply_text(
        text=LAN.BROADCAST_STARTED)
    start_time = time.time()
    total_users = await db.total_users_count()
    done = 0
    failed = 0
    success = 0
    broadcast_ids[broadcast_id] = dict(total=total_users, current=done, failed=failed, success=success)
    async with aiofiles.open("broadcast-logs-g4rip.txt", "w") as broadcast_log_file:
        async for user in all_users:
            sts, msg = await send_msg(user_id=int(user["id"]), message=broadcast_msg)
            if msg is not None:
                await broadcast_log_file.write(msg)
            if sts == 200:
                success += 1
            else:
                failed += 1
            if sts == 400:
                await db.delete_user(user["id"])
            done += 1
            if broadcast_ids.get(broadcast_id) is None:
                break
            else:
                broadcast_ids[broadcast_id].update(
                    dict(current=done, failed=failed, success=success))
    if broadcast_ids.get(broadcast_id):
        broadcast_ids.pop(broadcast_id)
    completed_in = datetime.timedelta(seconds=int(time.time() - start_time))
    await asyncio.sleep(3)
    await out.delete()
    if failed == 0:
        await m.reply_text(text=LAN.BROADCAST_STOPPED.format(completed_in, total_users, done, success, failed), quote=True,)
    else:
        await m.reply_document(document="broadcast-logs-g4rip.txt", caption=LAN.BROADCAST_STOPPED.format(completed_in, total_users, done, success, failed), quote=True,)
    os.remove("broadcast-logs-g4rip.txt")



# Genelde m√ºzik botlarƒ±nƒ±n mesaj silme √∂zelliƒüi olur. Bu √∂zelliƒüi ReadMe.md dosyasƒ±ndaki √∂rnekteki gibi kullanabilirsiniz.
delcmdmdb = dcmdb.admins

async def delcmd_is_on(chat_id: int) -> bool: # Grup i√ßin mesaj silme √∂zeliƒüinin a√ßƒ±k olup olmadƒ±ƒüƒ±nƒ± kontrol eder.
    chat = await delcmdmdb.find_one({"chat_id": chat_id})
    return not chat


async def delcmd_on(chat_id: int): # Grup i√ßin mesaj silme √∂zeliƒüini a√ßar.
    already_del = await delcmd_is_on(chat_id)
    if already_del:
        return
    return await delcmdmdb.delete_one({"chat_id": chat_id})


async def delcmd_off(chat_id: int): # Grup i√ßin mesaj silme √∂zeliƒüini kapatƒ±r.
    already_del = await delcmd_is_on(chat_id)
    if not already_del:
        return
    return await delcmdmdb.insert_one({"chat_id": chat_id})



################# SAHƒ∞P KOMUTLARI #############

# Verileri listeleme komutu
@app.on_message(filters.command("stats") & filters.user(OWNER_ID))
async def botstats(bot: Client, message: Message):
    g4rip = await bot.send_message(message.chat.id, LAN.STATS_STARTED.format(message.from_user.mention))
    all_users = await db.get_all_users()
    groups = 0
    pms = 0
    async for user in all_users:
        if str(user["id"]).startswith("-"):
            groups += 1
        else:
            pms += 1
    total, used, free = shutil.disk_usage(".")
    total = humanbytes(total)
    used = humanbytes(used)
    free = humanbytes(free)
    cpu_usage = psutil.cpu_percent()
    ram_usage = psutil.virtual_memory().percent
    disk_usage = psutil.disk_usage("/").percent
    total_users = await db.total_users_count()
    await g4rip.edit(text=LAN.STATS.format(BOT_USERNAME, total_users, groups, pms, total, used, disk_usage, free, cpu_usage, ram_usage, __version__), parse_mode="md")



# Botu ilk ba≈ülatan kullanƒ±cƒ±larƒ±n kontrol√ºn√º saƒülar.
@app.on_message()
async def G4RIP(bot: Client, cmd: Message):
    await handle_user_status(bot, cmd)



# Broadcast komutu
@app.on_message(filters.command("reklam") & filters.user(OWNER_ID) & filters.reply)
async def broadcast_handler_open(_, m: Message):
    await main_broadcast_handler(m, db)



# Bir kullanƒ±cƒ± yasaklama komutu
@app.on_message(filters.command("block") & filters.user(OWNER_ID))
async def ban(c: Client, m: Message):
    if m.reply_to_message:
        user_id = m.reply_to_message.from_user.id
        if len(m.command) <= 1:
            ban_duration = 9999
            ban_reason = LAN.BAN_REASON.format(BOT_USERNAME)
        elif len(m.command) == 2:
            ban_duration = 9999
            ban_reason = " ".join(m.command[1:])
    else:
        if len(m.command) <= 1:
            return await m.reply(LAN.NEED_USER)
        elif len(m.command) == 2:
            user_id = int(m.command[1])
            ban_duration = 9999
            ban_reason = LAN.BAN_REASON.format(BOT_USERNAME)
        elif len(m.command) == 3:
            user_id = int(m.command[1])
            ban_duration = 9999
            ban_reason = " ".join(m.command[2:])
    
        if str(user_id).startswith("-"):
            try:    
                ban_log_text = LAN.BANNED_GROUP.format(m.from_user.mention, user_id, ban_duration, ban_reason)
                await c.send_message(user_id, LAN.AFTER_BAN_GROUP.format(ban_reason))
                await c.leave_chat(user_id)
                ban_log_text += LAN.GROUP_BILGILENDIRILDI
            except BaseException:
                traceback.print_exc()
                ban_log_text += LAN.GRUP_BILGILENDIRILEMEDI.format(traceback.format_exc())
        else:
            try:    
                ban_log_text = LAN.USER_BANNED.format(m.from_user.mention, user_id, ban_duration, ban_reason)
                await c.send_message(user_id, LAN.AFTER_BAN_USER.format(ban_reason))
                ban_log_text += LAN.KULLANICI_BILGILENDIRME
            except BaseException:
                traceback.print_exc()
                ban_log_text += LAN.KULLANICI_BILGILENDIRMEME.format(traceback.format_exc())
        await db.ban_user(user_id, ban_duration, ban_reason)
        await c.send_message(LOG_CHANNEL, ban_log_text)
        await m.reply_text(ban_log_text, quote=True)



# Bir kullanƒ±cƒ±n yasaƒüƒ±nƒ± kaldƒ±rmak komutu
@app.on_message(filters.command("unblock") & filters.user(OWNER_ID))
async def unban(c: Client, m: Message):
        if m.reply_to_message:
            user_id = m.reply_to_message.from_user.id
        else:
            if len(m.command) <= 1:
                return await m.reply(LAN.NEED_USER)
            else:
                user_id = int(m.command[1])
        unban_log_text = LAN.UNBANNED_USER.format(m.from_user.mention, user_id)
        if not str(user_id).startswith("-"):
            try:
                await c.send_message(user_id, LAN.USER_UNBAN_NOTIFY)
                unban_log_text += LAN.KULLANICI_BILGILENDIRME
            except BaseException:
                traceback.print_exc()
                unban_log_text += LAN.KULLANICI_BILGILENDIRMEME.format(traceback.format_exc())
        await db.remove_ban(user_id)
        await c.send_message(LOG_CHANNEL, unban_log_text)
        await m.reply_text(unban_log_text, quote=True)



# Yasaklƒ± listesini g√∂rme komutu
@app.on_message(filters.command("blocklist") & filters.user(OWNER_ID))
async def _banned_usrs(_, m: Message):
    all_banned_users = await db.get_all_banned_users()
    banned_usr_count = 0
    text = ""
    async for banned_user in all_banned_users:
        user_id = banned_user["id"]
        ban_duration = banned_user["ban_status"]["ban_duration"]
        banned_on = banned_user["ban_status"]["banned_on"]
        ban_reason = banned_user["ban_status"]["ban_reason"]
        banned_usr_count += 1
        text += LAN.BLOCKS.format(user_id, ban_duration, banned_on, ban_reason)
    reply_text = LAN.TOTAL_BLOCK.format(banned_usr_count, text)
    if len(reply_text) > 4096:
        with open("banned-user-list.txt", "w") as f:
            f.write(reply_text)
        await m.reply_document("banned-user-list.txt", True)
        os.remove("banned-user-list.txt")
        return
    await m.reply_text(reply_text, True)



############## BELƒ∞RLƒ∞ GEREKLƒ∞ DEF'LER ###########
def humanbytes(size):
    if not size:
        return ""
    power = 2**10
    raised_to_pow = 0
    dict_power_n = {0: "", 1: "K", 2: "M", 3: "G", 4: "T"}
    while size > power:
        size /= power
        raised_to_pow += 1
    return str(round(size, 2)) + " " + dict_power_n[raised_to_pow] + "B"



########### √áOKLU Dƒ∞L ##############
class LAN(object):

    if LANGAUGE == "TR":

        BILDIRIM = "```üì£ Yeni Bildirim``` \n\n#YENI_KULLANICI **botu ba≈ülattƒ±!** \n\nüè∑ isim: `{}` \nüìÆ kullanƒ±cƒ± id: `{}` \nüßùüèª‚Äç‚ôÇÔ∏è profil linki: [{}](tg://user?id={})"
        GRUP_BILDIRIM = "```üì£ Yeni Bildirim``` \n\n#YENI_GRUP **botu ba≈ülattƒ±!** \n\nüè∑ Gruba Alan ƒ∞sim: `{}` \nüìÆ Gruba Alan kullanƒ±cƒ± id: `{}` \nüßùüèª‚Äç‚ôÇÔ∏è profil linki: [{}](tg://user?id={})\n Grubun Adƒ±: {}\n Grubun ID: {}\n Grubun Mesaj Linki( sadece a√ßƒ±k gruplar): [Buraya Tƒ±kla](https://t.me/c/{}/{})"
        SAHIBIME = "sahibime"
        PRIVATE_BAN = "√úzg√ºn√ºm, yasaklandƒ±nƒ±z! Bunun bir hata olduƒüunu d√º≈ü√ºnyorsanƒ±z {} yazƒ±n."
        GROUP_BAN = "√úzg√ºn√ºm, grubunuz karalisteye alƒ±ndƒ±! Burada daha fazla kalamam. Bunun bir hata olduƒüunu d√º≈ü√ºnyorsanƒ±z {} yazƒ±n.'"
        NOT_ONLINE = "aktif deƒüil"
        BOT_BLOCKED = "botu engellemi≈ü"
        USER_ID_FALSE = "kullanƒ±cƒ± kimliƒüi yanlƒ±≈ü"
        BROADCAST_STARTED = "```üì§ BroadCast ba≈ülatƒ±ldƒ±! Bittiƒüi zaman mesaj alacaksƒ±nƒ±z!"
        BROADCAST_STOPPED = "‚úÖ ```Broadcast ba≈üarƒ±yla tamamlandƒ±.``` \n\n**≈ûu Kadar S√ºrede Tamamlandƒ±:** `{}` \n\n**Kayƒ±tlƒ± Toplam Kullanƒ±cƒ±:** `{}` \n\n**Toplam G√∂nderme Denemesi:** `{}` \n\n**Ba≈üarƒ±yla G√∂nderilen:** `{}` \n\n**Toplam Hata:** `{}`"
        STATS_STARTED = "{} **L√ºtfen bekleyiniz verileri getiriyorum!**"
        STATS = """**@{} Verileri**\n\n**Kullanƒ±cƒ±lar;**\n¬ª **Toplam Sohbetler:** `{}`\n¬ª **Toplam Gruplar: `{}`\n¬ª **Toplam PM's: `{}`\n\n**Disk Kullanƒ±mƒ±;**\n¬ª **Disk Alanƒ±:** `{}`\n¬ª **Kullanƒ±lan:** `{}({}%)`\n¬ª **Bo≈üta:** `{}`\n\n**üéõ En Y√ºksek Kullanƒ±m Deƒüerleri;**\n¬ª **CPU:** `{}%`\n¬ª **RAM:** `{}%`\n**S√ºr√ºmler;**\n¬ª **Pyrogram:** {}\n\n\n__‚Ä¢ By @BasicBots__"""
        BAN_REASON = "Bu sebep yasaklandƒ±ƒüƒ±nƒ±z i√ßin @{} tarafƒ±ndan otomatik olarak olu≈üturulmu≈ütur"
        NEED_USER = "**L√ºtfen Kullanƒ±cƒ± kimliƒüi verin.**"
        BANNED_GROUP = "üö∑ **Yasaklandƒ±!\n\nTarafƒ±ndan:** {}\n**Grup ID:** `{}` \n**S√ºre:** `{}` \n**Sebep:** `{}`"
        AFTER_BAN_GROUP = "**√úzg√ºn√ºm grubunuz kara listeye alƒ±ndƒ±! \n\nSebep:** `{}`\n\n**Daha fazla burada kalamam. Bunun bir hata olduƒüunu d√º≈ü√ºn√ºyorsanƒ±z destek grubuna gelin.**"
        GROUP_BILGILENDIRILDI = "\n\n‚úÖ **Grubu bilgilendirdim ve gruptan ayrƒ±ldƒ±m.**"
        GRUP_BILGILENDIRILEMEDI = "\n\n‚ùå **Grubu bilgilendirmeye √ßalƒ±≈üƒ±rken bir hata olu≈ütu:** \n\n`{}`"
        USER_BANNED = "üö∑ **Yasaklandƒ±! \n\nTarafƒ±ndan:** {}\n **Kullanƒ±cƒ± ID:** `{}` \n**S√ºre:** `{}` \n**Sebep:** `{}`"
        AFTER_BAN_USER = "**√úzg√ºn√ºm kara listeye alƒ±ndƒ±nƒ±z! \n\nSebep:** `{}`\n\n**Bundan sonra size hizmet veremeyeceƒüim.**"
        KULLANICI_BILGILENDIRME = "\n\n‚úÖ Ki≈üiyi bilgilendirdim."
        KULLANICI_BILGILENDIRMEME = "\n\n‚ùå **Ki≈üiyi bilgilendirmeye √ßalƒ±≈üƒ±rken bir hata olu≈ütu:** \n\n`{}`"
        UNBANNED_USER = "üÜì **Kullanƒ±cƒ±nƒ±n Yasaƒüƒ± Kaldƒ±rƒ±ldƒ± !** \nTarafƒ±ndan: {} \n**Kullanƒ±cƒ± ID:**{}"
        USER_UNBAN_NOTIFY = "üéä M√ºjde! Yasaƒüƒ±nƒ±z kaldƒ±rƒ±ldƒ±!"
        BLOCKS = "üÜî **Kullanƒ±cƒ± ID**: `{}`\n‚è± **S√ºre**: `{}`\nüóì **Yasaklanan Tarih**: `{}`\nüí¨ **Sebep**: `{}`\n\n"
        TOTAL_BLOCK = "üö∑ **Toplam Yasaklanan:** `{}`\n\n{}"

    elif LANGAUGE == "AZ":

        BILDIRIM = "```üì£ Yeni ƒ∞smarƒ±c``` \n\n#YENI_ISTIFAD∆è√áƒ∞ **botu ba≈ülatdƒ±!** \n\nüè∑ isim: `{}` \nüìÆ istifad…ô√ßi id: `{}` \nüßùüèª‚Äç‚ôÇÔ∏è profil linki: [{}](tg://user?id={})"
        GRUP_BILDIRIM = "```üì£ Yeni ƒ∞smarƒ±c``` \n\n#YENI_QRUP **botu ba≈ülatdƒ±!** \n\nüè∑ Qrupa …ôlav…ô ed…ôn: `{}` \nüìÆ Qrupa …ôlav…ô ed…ôn istifad…ô√ßi id: `{}` \nüßùüèª‚Äç‚ôÇÔ∏è profil linki: [{}](tg://user?id={})\n Qrupun adƒ±: {}\n Qrupun ID: {}\n Qrupun mesaj kinki( sad…ôc…ô a√ßƒ±q qruplar): [Buraya Toxun](https://t.me/c/{}/{})"
        SAHIBIME = "sahibim…ô"
        PRIVATE_BAN = "M…ôyusam, …ông…ôll…ôndiniz! Bunun bir x…ôta olduƒüunu d√º≈ü√ºn√ºrs√ºn√ºz is…ô {} yazƒ±n."
        GROUP_BAN = "M…ôyusam, qrupunuz qara siyahƒ±ya …ôlav…ô olundu! Artƒ±q burada qala bilm…ôr…ôm! Bunun bir x…ôta olduƒüunu d√º≈ü√ºn√ºrs√ºn√ºz is…ô {} yazƒ±n.'"
        NOT_ONLINE = "aktiv deyil"
        BOT_BLOCKED = "botu …ông…ôll…ôyib"
        USER_ID_FALSE = "istifad…ô√ßi id'i yanlƒ±≈üdƒ±r."
        BROADCAST_STARTED = "```üì§ BroadCast ba≈üladƒ±ldƒ±! Bit…ônd…ô mesaj alacaqsƒ±nƒ±z."
        BROADCAST_STOPPED = "‚úÖ ```Broadcast uƒüurla tamamlandƒ±.``` \n\n**Bu q…ôd…ôr vaxtda tamamlandƒ±** `{}` \n\n**√úmumi istifad…ô√ßil…ôr:** `{}` \n\n**√úmumi g√∂nd…ôrm…ô c…ôhdl…ôri:** `{}` \n\n**Uƒüurla g√∂nd…ôril…ôn:** `{}` \n\n**√úmumi x…ôta:** `{}`"
        STATS_STARTED = "{} **Z…ôhm…ôt olmasa g√∂zl…ôyin, bilgil…ôri g…ôtirir…ôm!**"
        STATS = """**@{} M…ôlumatlarƒ±**\n\n**ƒ∞stifad…ô√ßil…ôri;**\n¬ª **√úmumi s√∂hb…ôtl…ôr:** `{}`\n¬ª **√úmumi qruplar: `{}`\n¬ª **√úmumi PM's: `{}`\n\n**Disk ƒ∞stifad…ôsi;**\n¬ª **Disk'in Sah…ôsi:** `{}`\n¬ª **ƒ∞stifad…ô edil…ôn:** `{}({}%)`\n¬ª **Bo≈ü qalan:** `{}`\n\n**üéõ ∆èn y√ºks…ôk istifad…ô d…ôy…ôrl…ôri;**\n¬ª **CPU:** `{}%`\n¬ª **RAM:** `{}%`\n**Versiyalar;**\n¬ª **Pyrogram:** {}\n\n\n__‚Ä¢ By @BasicBots__"""
        BAN_REASON = "Bu sebep yasaklandƒ±ƒüƒ±nƒ±z i√ßin @{} tarafƒ±ndan otomatik olarak olu≈üturulmu≈ütur"
        NEED_USER = "**Z…ôhm…ôt olmasa istifad…ô√ßi id'si verin.**"
        BANNED_GROUP = "üö∑ **Qadaƒüan olundu!\n\nQadaƒüan ed…ôn:** {}\n**Qrup ID:** `{}` \n**Vaxt:** `{}` \n**S…ôb…ôb:** `{}`"
        AFTER_BAN_GROUP = "**M…ôyusam, qrupunyz qara siyahƒ±ya …ôlav…ô edildi! \n\nS…ôb…ôb:** `{}`\n\n**Artƒ±q burada qala bilm…ôr…ôm. Bunun bir x…ôta olduƒüunu d√º≈ü√ºn√ºrs√ºn√ºzs…ô, d…ôt…ôk qrupuna g…ôlin.**"
        GROUP_BILGILENDIRILDI = "\n\n‚úÖ **Qrupu bilgil…ôndirdim v…ô qrupdan √ßƒ±xdƒ±m.**"
        GRUP_BILGILENDIRILEMEDI = "\n\n‚ùå **Qrupu m…ôlumatlandƒ±rark…ôn x…ôta yarandƒ±:** \n\n`{}`"
        USER_BANNED = "üö∑ **Qadaƒüan olundu! \n\nQadaƒüan ed…ôn:** {}\n **ƒ∞stifad…ô√ßi ID:** `{}` \n**Vaxt:** `{}` \n**S…ôb…ôb:** `{}`"
        AFTER_BAN_USER = "**M…ôyusam, qara siyahƒ±ya …ôlav…ô edildiniz! \n\nS…ôb…ôb:** `{}`\n\n**Bundan sonra siz…ô xidm…ôt etm…ôy…ôc…ôy…ôm.**"
        KULLANICI_BILGILENDIRME = "\n\n‚úÖ ƒ∞stifad…ô√ßini m…ôlumatlandƒ±rdƒ±m."
        KULLANICI_BILGILENDIRMEME = "\n\n‚ùå **ƒ∞stifad…ô√ßini m…ôlumatlandƒ±rark…ôn x…ôta yarandƒ±:** \n\n`{}`"
        UNBANNED_USER = "üÜì **ƒ∞stifad…ô√ßinin qadaƒüasƒ± qaldƒ±rƒ±ldƒ± !** \nQadaƒüanƒ± qaldƒ±ran: {} \n**ƒ∞stifad…ô√ßi ID:**{}"
        USER_UNBAN_NOTIFY = "üéä Siz…ô g√∂z…ôl bir x…ôb…ôrim var! Artƒ±q …ông…ôliniz qaldƒ±rƒ±ldƒ±!"
        BLOCKS = "üÜî **ƒ∞stifad…ô√ßi ID**: `{}`\n‚è± **Vaxt**: `{}`\nüóì **Qadaƒüan edildiyi tarix**: `{}`\nüí¨ **S…ôb…ôb**: `{}`\n\n"
        TOTAL_BLOCK = "üö∑ **√úmumi …ông…ôll…ôn…ôn:** `{}`\n\n{}"
	

	
@app.on_message(filters.command("delcmd") & ~filters.private)
async def delcmdc(bot: Client, message: Message):
    if len(message.command) != 2:
        return await message.reply_text("Bu …ômrd…ôn istifad…ô etm…ôk √º√ß√ºn …ômrinizin yanƒ±nda 'off' v…ô ya 'on' yazƒ±n.")
    durum = message.text.split(None, 1)[1].strip()
    durum = durum.lower()
    chat_id = message.chat.id

    if durum == "on":
        if await delcmd_is_on(message.chat.id):
            return await message.reply_text("Komandanƒ±n Silinm…ôsi Artƒ±q Aktivdir.")
        else:
            await delcmd_on(chat_id)
            await message.reply_text("Bu s√∂hb…ôt √º√ß√ºn Sil …ômri uƒüurla aktivl…ô≈üdirildi.")

    elif durum == "off":
        await delcmd_off(chat_id)
        await message.reply_text("Komanda Silm…ô funksiyasƒ± bu S√∂hb…ôt √º√ß√ºn uƒüurla deaktiv edildi.")
    else:
        await message.reply_text("Bu …ômrd…ôn istifad…ô etm…ôk √º√ß√ºn …ômrinizin yanƒ±nda 'off' v…ô ya 'on' yazƒ±n.")



  
client = TelegramClient('client', api_id, api_hash).start(bot_token=bot_token)

anlik_calisan = [] 

tekli_calisan = []

@client.on(events.NewMessage(pattern="^/start$"))
async def start(event):
  if event.is_private:
    async for usr in client.iter_participants(event.chat_id):
     ad = f"[{usr.first_name}](tg://user?id={usr.id}) "
     await event.reply(f"**üëã Salam {ad} M…ôn OLD MULTƒ∞ BOT bir cox funksyaya malik OLD MULTƒ∞ botam\n\nü§î Botun isdifade qaydasƒ±n bilmirsen indi ise 'üéõ ∆èMRL∆èR' b√∂lm…ôsin…ô daxil olun\n\n‚úâÔ∏è Botu ba≈üladƒ±qƒ±na dayir Sahibime mesaj yolladƒ±m**", buttons=(
                     [Button.inline("üéõ ∆èMRL∆èR", data="emir")],
       # [Button.url('üéâ Sahib', 'https://t.me/Nehmedov')],
              # [Button.url('Qurupüõ†', 'https://t.me/Bizim_Paytaxt'),
                    #  Button.url('üí° USTA Bots', 'https://t.me/ustabots')],
               [Button.url('‚ûï Qrupa ∆èlav…ô Et ‚ûï','http://t.me/OldMultiBot?startgroup=a'),
                Button.url('üé¥ KANALIM','http://t.me/TEAMABASOFcom')],
               [Button.url("üåü SAHƒ∞B",'https://t.me/AnonyumAz'),
                      Button.url('üé∂ PLAY Lƒ∞ST','https://t.me/oldmultisong')],
                    ),
                    link_preview=False)


  if event.is_group:
    return await client.send_message(event.chat_id, f"**∆èziz isdifade√ßi Qroupda cox yazmaqla ba≈üƒ±nƒ±zƒ± aƒürƒ±tmƒ±yƒ±m Bota Ke√ß vuraraq ≈üexside melumat ala bilersiz**", buttons=(
                     [Button.url('üí° Bota Ke√ß','https://t.me/OldMultiBot?start=start')],
                    ),
                    link_preview=False)



@client.on(events.callbackquery.CallbackQuery(data="start"))
async def handler(event):
    async for usr in client.iter_participants(event.chat_id):
     ad = f"[{usr.first_name}](tg://user?id={usr.id}) "
     await event.edit(f"**üëã Salam {ad} M…ôn OLD MULTƒ∞ BOT bir cox funksyaya malik OLD MULTƒ∞ botam\n\nü§î Botun isdifade qaydasƒ±n bilmirsen indi ise 'üéõ ∆èMRL∆èR' b√∂lm…ôsin…ô daxil olun\n\n‚úâÔ∏è Botu ba≈üladƒ±qƒ±na dayir Sahibime mesaj yolladƒ±m**", buttons=(
                     [Button.inline(f"üéõ ∆èMRL∆èR", data="emir")],
        # [Button.url('üéâ Sahib', 'https://t.me/Nehmedov')],
               #[Button.url('Qurupüõ†', 'https://t.me/Bizim_Paytaxt'),
                      #Button.url('ü§ñ USTA Bots', 'https://t.me/ustabots')],
               [Button.url('‚ûï Qrupa ∆èlav…ô Et ‚ûï','http://t.me/OldMultiBot?startgroup=a'),
                Button.url('üé¥ KANALIM','http://t.me/TEAMABASOFcom')],
               [Button.url('üåü SAHƒ∞B','https://t.me/AnonyumAz'),
                      Button.url('üé∂ PLAY Lƒ∞ST', 'https://t.me/oldmultisong')],
                    ),
                    link_preview=False)

@client.on(events.callbackquery.CallbackQuery(data="emir"))
async def handler(event):
    async for usr in client.iter_participants(event.chat_id):
     ad = f"[{usr.first_name}](tg://user?id={usr.id}) "
     await event.edit(f"**ü§© Siz artƒ±q ∆èMRL∆èR b√∂l√ºm√ºndesiz\n\nü´° Hansƒ± …ômri isd…ôs…ôniz a≈üaƒüƒ±da Buttonla vuraraq baxa bilersiz\n\nü©∂ XO≈û ƒ∞SDƒ∞FADELER @OldMultiBot**", buttons=(
                     [Button.inline("üåü ADMƒ∞N ∆èMRL∆èR", data="ahelp")],
        # [Button.url('üéâ Sahib', 'https://t.me/Nehmedov')],
               #[Button.url('Qurupüõ†', 'https://t.me/Bizim_Paytaxt'),
                      #Button.url('ü§ñ USTA Bots', 'https://t.me/ustabots')],
               [Button.inline(f"ü™¨ SAHƒ∞B ∆èMRL∆èRƒ∞", data="thelp"),
                Button.inline(f"üì• Y√úKL∆èM∆è", data="yhelp")],
               [Button.inline(f"üïπ ∆èYL∆èNC∆è", data="dhelp"),
                      Button.inline(f"‚ûïÔ∏è ∆èLAV∆èL∆èR", data="elave")],
	       [Button.inline(f"üîô Geri", data="start")]
                    ),
                    link_preview=False)

# rehim / abasof
@client.on(events.callbackquery.CallbackQuery(data="thelp"))
async def handler(event): 
    await event.edit(f"**[@OldMultiBot](http://t.me/OldMultiBot)-un 'ü™¨ SAHƒ∞B ∆èMRL∆èR' b√∂lm…ôsi ‚§µ**\n\n\n‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢‚Ä¢‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢\n**ü™¨ ‚û™ /stats - Botun istdifad…ô√ßil…ôri v…ô botun olduqu grouplarƒ± g√∂st…ôrir**\n\n**ü™¨ ‚û™ /reklam - reklam yollayar**\n\n**ü™¨ ‚û™ /alive - Botun aktiv olduqun g√∂st…ôrir**\n‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢‚Ä¢‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢", buttons=(
              # [Button.url('‚ûï M…ôni Qrupa …ôlav…ô et ‚ûï','http://t.me/UstaTagbot?startgroup=a')],
         #[Button.url('üéâ Sahib', 'https://t.me/Nehmedov')],
               [Button.url('üîÆ Kanalƒ±m','https://t.me/TEAMABASOFcom'),
                      Button.url('üé∂ PLAY Lƒ∞ST','https://t.me/oldmultisong')],
               [Button.inline(f"üîô Geri", data="emir")]
                    ),
                    link_preview=False)

@client.on(events.callbackquery.CallbackQuery(data="yhelp"))
async def handler(event): 
    await event.edit(f"**[@OldMultiBot](http://t.me/OldMultiBot)-un 'üì• Y√úKL∆èM∆è' b√∂lm…ôsi ‚§µ**\n\n\n‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢‚Ä¢‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢\n**üéµ ‚û™  /song - MAHNI Y√úKL∆èYƒ∞R**\n**üìΩ ‚û™ /video v…ô ya /vsong - ƒ∞sd…ôdiyiniz videonu Youtub dan y√ºkl…ôy…ôr\n**üìú ‚û™ /paste - m…ôtini pastebin edin**\n‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢‚Ä¢‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢", buttons=(
              # [Button.url('‚ûï M…ôni Qrupa …ôlav…ô et ‚ûï','http://t.me/UstaTagbot?startgroup=a')],
         #[Button.url('üéâ Sahib', 'https://t.me/Nehmedov')],
               [Button.url('üîÆ Kanalƒ±m','https://t.me/TEAMABASOFcom'),
                      Button.url('üé∂ PLAY Lƒ∞ST','https://t.me/oldmultisong')],
               [Button.inline(f"üîô Geri", data="emir")]
                    ),
                    link_preview=False)

@client.on(events.callbackquery.CallbackQuery(data="dhelp"))
async def handler(event): 
    await event.edit(f"**[@OldMultiBot](http://t.me/OldMultiBot)-un 'üïπ ∆èYL∆èNC∆è' b√∂lm…ôsi ‚§µ**\n\n\n‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢‚Ä¢‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢\n**‚ò∏Ô∏è ‚û™ /dc - Doƒüruluq V…ô C…ôsar…ôt oyunu basladƒ±r**\n**üé≤ ‚û™ /zer - Z…ôr atar**\n**üéØ ‚û™ /ox - Ox atar**\n**‚öΩÔ∏è ‚û™ /gol - Goal atar**\n**üé∞ ‚û™ /spin - Spin cevir**\n**üèÄ ‚û™ /basket - Basket atar**\n**üé≥ ‚û™ /bowling - Bowling atar**\n\n**‚ù§Ô∏è‚Äçüî• ‚û™ /sevgi - sevdiyiniz insanƒ±n adininin ba≈ü h…ôrfini g√∂st…ôrir(Groupda i≈ül…ôkdir)**\n‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢‚Ä¢‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢", buttons=(
              # [Button.url('‚ûï M…ôni Qrupa …ôlav…ô et ‚ûï','http://t.me/UstaTagbot?startgroup=a')],
         #[Button.url('üéâ Sahib', 'https://t.me/Nehmedov')],
               [Button.url('üîÆ Kanalƒ±m','https://t.me/TEAMABASOFcom'),
                      Button.url('üé∂ PLAY Lƒ∞ST','https://t.me/oldmultisong')],
               [Button.inline(f"üîô Geri", data="emir")]
                    ),
                    link_preview=False)

@client.on(events.callbackquery.CallbackQuery(data="elave"))
async def handler(event): 
    await event.edit(f"**[@OldMultiBot](http://t.me/OldMultiBot)-un '‚ûïÔ∏è ∆èLAV∆èL∆èR' b√∂lm…ôsi ‚§µ**\n\n\n‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢‚Ä¢‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢\n**ü™™ ‚û™ /info - Kullanƒ±cƒ± melumat getirii**\n**üìà ‚û™ /ping - Botun pingin √∂l√ß√ºr**\n**\n**üòî ‚û™ /sehid - ≈ü…ôhid adlarƒ± atƒ±r**\n**ü§ñ ‚û™ /anekdod - Random anekdod atar**\n**ü§ñ ‚û™ /meslehet - Botdan M…ôsl…ôh…ôt alin**\n**ü§ñ ‚û™ /carbon - M…ôtini carbona d√∂n√º≈üd√ºr (Qroupda isliyir)**\n**ü§ñ ‚û™ /tema - Random Telegram Temasƒ± atar (Qroupda isliyir)**\n**üëã ‚û™ salamlama - Groupa qatƒ±lanlara xo≈ü geldin deyir**\n‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢‚Ä¢‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢", buttons=(
              # [Button.url('‚ûï M…ôni Qrupa …ôlav…ô et ‚ûï','http://t.me/UstaTagbot?startgroup=a')],
         #[Button.url('üéâ Sahib', 'https://t.me/Nehmedov')],
               [Button.url('üîÆ Kanalƒ±m','https://t.me/TEAMABASOFcom'),
                      Button.url('üé∂ PLAY Lƒ∞ST','https://t.me/oldmultisong')],
               [Button.inline(f"üîô Geri", data="emir")]
                    ),
                    link_preview=False)

@client.on(events.callbackquery.CallbackQuery(data="ahelp"))
async def handler(event): 
    await event.edit(f"**[@OldMultiBot](http://t.me/OldMultiBot)-un 'üåü ADMƒ∞N ∆èMRL∆èRƒ∞' b√∂lm…ôsi ‚§µ**\n\n\n‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢‚Ä¢‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢\n**üåü ‚û™ /pin - Groupda mesaj sabitleyir**\n**üåü ‚û™ /unpin - bot kendi etdiyi mesajƒ± sabitden qaldƒ±rar**\n‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢‚Ä¢‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢", buttons=(
              # [Button.url('‚ûï M…ôni Qrupa …ôlav…ô et ‚ûï','http://t.me/UstaTagbot?startgroup=a')],
         #[Button.url('üéâ Sahib', 'https://t.me/Nehmedov')],
               [Button.url('üîÆ Kanalƒ±m','https://t.me/TEAMABASOFcom'),
                      Button.url('üé∂ PLAY Lƒ∞ST','https://t.me/oldmultisong')],
               [Button.inline(f"üîô Geri", data="emir")]
                    ),
                    link_preview=False)


 

#pyrogram
@app.on_message(filters.command("info"))
async def _id(_, message: Message):
    msg = message.reply_to_message or message
    out_str = "**User ƒ∞nfo:**\n"
    out_str += f" üíé __Yanƒ±tlanan Kullanƒ±cƒ± Adƒ±__ : {msg.from_user.first_name}\n"
    out_str += f" üí¨ __Mesaj ID__ : `{msg.forward_from_message_id or msg.message_id}`\n"
    if msg.from_user:
        out_str += f" üôãüèª‚Äç‚ôÇÔ∏è __Yanƒ±tlanan Kullanƒ±cƒ± ID__ : `{msg.from_user.id}`\n"
 
    await message.reply(out_str)



#mahnƒ± y√ºkl…ôm…ô#
@app.on_message(filters.command("song"))
def song(_, message):
    query = " ".join(message.command[1:])
    m = message.reply("<b>Mahnƒ±nƒ±z Axtarƒ±lƒ±r ... üîç</b>")
    ydl_ops = {"format": "bestaudio[ext=m4a]"}
    try:
        results = YoutubeSearch(query, max_results=1).to_dict()
        link = f"https://youtube.com{results[0]['url_suffix']}"
        title = results[0]["title"][:40]
        thumbnail = results[0]["thumbnails"][0]
        thumb_name = f"{title}.jpg"
        thumb = requests.get(thumbnail, allow_redirects=True)
        open(thumb_name, "wb").write(thumb.content)
        duration = results[0]["duration"]

    except Exception as e:
        m.edit("<b>‚ùå Bunu dem…ôliy…ôm √ºz√ºrl√º say üòî mahnƒ± tapƒ±lmadƒ±.\n\n Z…ôhm…ôt Olmasa ba≈üqa mahnƒ± adƒ± deyin @oldsupport üç∑.</b>")
        print(str(e))
        return
    m.edit("<b>üì• Y√ºkl…ôm…ô Prosesi Ba≈üladƒ±...</b>")
    try:
        with yt_dlp.YoutubeDL(ydl_ops) as ydl:
            info_dict = ydl.extract_info(link, download=False)
            audio_file = ydl.prepare_filename(info_dict)
            ydl.process_info(info_dict)
        rep = f"**‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**\n**‚îú‚ñ∑ ‚ô¨ Adƒ±: [{title[:35]}]({link})**\n**‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**\n**‚îú‚ñ∑‚ô¨ Playlist @{Config.PLAYLIST_NAME}**\n**‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**"
        res = f"**‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**\n**‚îú‚ñ∑ ‚ô¨ Adƒ±: [{title[:35]}]({link})**\n**‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**\n**‚îú‚ñ∑üë§ ƒ∞st…ôy…ôn** [{message.from_user.first_name}](tg://user?id={message.from_user.id})\n**‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**\n**‚îú‚ñ∑üåÄ Bot: @{Config.BOT_USERNAME}**\n**‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**"
        secmul, dur, dur_arr = 1, 0, duration.split(":")
        for i in range(len(dur_arr) - 1, -1, -1):
            dur += int(float(dur_arr[i])) * secmul
            secmul *= 60
        m.edit("üì§ Y√ºklenir..")
        message.reply_audio(audio_file, caption=rep, parse_mode='md',quote=False, title=title, duration=dur, thumb=thumb_name, performer="@OldMultiBot")
        m.delete()
        app.send_audio(chat_id=Config.PLAYLIST_ID, audio=audio_file, caption=res, performer="@OldMultiBot", parse_mode='md', title=title, duration=dur, thumb=thumb_name)
    except Exception as e:
        m.edit("<link X…ôtanƒ±n, d√ºzelmesini g√∂zl…ôyin.</b>")
        print(e)

    try:
        os.remove(audio_file)
        os.remove(thumb_name)
    except Exception as e:
        print(e)


# video indirme 

@app.on_message(
    filters.command(["video", "vsong"])
)
async def vsong(client, message):
    ydl_opts = {
        "format": "best",
        "keepvideo": True,
        "prefer_ffmpeg": False,
        "geo_bypass": True,
        "outtmpl": "%(title)s.%(ext)s",
        "quite": True,
    }
    query = " ".join(message.command[1:])
    try:
        results = YoutubeSearch(query, max_results=1).to_dict()
        link = f"https://youtube.com{results[0]['url_suffix']}"
        title = results[0]["title"][:40]
        thumbnail = results[0]["thumbnails"][0]
        thumb_name = f"{title}.jpg"
        thumb = requests.get(thumbnail, allow_redirects=True)
        open(thumb_name, "wb").write(thumb.content)
        results[0]["duration"]
        results[0]["url_suffix"]
        results[0]["views"]
        message.from_user.mention
    except Exception as e:
        print(e)
    try:
        msg = await message.reply("üì• **video y√ºkl…ôn…ôc…ôy...**")
        with YoutubeDL(ydl_opts) as ytdl:
            ytdl_data = ytdl.extract_info(link, download=True)
            file_name = ytdl.prepare_filename(ytdl_data)
    except Exception as e:
        return await msg.edit(f"üö´ **X…ôta:** {e}")
    preview = wget.download(thumbnail)
    await msg.edit("üì§ **video y√ºkl…ônir...**")
    await message.reply_video(
        file_name,
        duration=int(ytdl_data["duration"]),
        thumb=preview,
        caption=ytdl_data["title"],
    )
    try:
        os.remove(file_name)
        await msg.delete()
    except Exception as e:
        print(e)




#Pyrogram comand
@app.on_message(filters.command("zer"))
async def roll_dice(bot, message):
    await bot.send_dice(message.chat.id, "üé≤")

@app.on_message(filters.command("ox"))                                      
async def roll_arrow(bot, message):
    await bot.send_dice(message.chat.id, "üéØ")

@app.on_message(filters.command("gol"))
async def roll_goal(bot, message):
    await bot.send_dice(message.chat.id, "‚öΩÔ∏è")

@app.on_message(filters.command("spin"))
async def roll_luck(bot, message):
    await bot.send_dice(message.chat.id, "üé∞")

@app.on_message(filters.command("basket"))
async def roll_throw(bot, message):
    await bot.send_dice(message.chat.id, "üèÄ")

@app.on_message(filters.command(["bowling", "tenpins"]))
async def roll_bowling(bot, message):
    await bot.send_dice(message.chat.id, "üé≥") 

 

#telethon xos geldin mesaj @edalet_22 terifind…ôn hazƒ±rlandƒ±
@client.on(events.ChatAction)
async def handler(event):
    if event.user_joined:
        await event.reply(random.choice(userjoin))


@client.on(events.ChatAction)
async def handler(event):
    if event.user_left:
        await event.reply("∆èla Bird…ô g…ôlm…ô")

userjoin = (

    "XO≈û G∆èLDƒ∞N ARAMIZA",
    "Xo≈ü g…ôldin xo≈ü s√∂hb…ôtl…ôr arzu edir…ôm",
    "Xo≈ü g…ôldin nec…ôs…ôn",
    "Xo≈ü g…ôldin groupa",
    "Xo≈ü g…ôldin …ôzizim",
    "",
)


@app.on_message(filters.command("ping"))
async def ping(_, message):
    start_t = time.time()
    rm = await message.reply_text("...")
    end_t = time.time()
    time_taken_s = (end_t - start_t) * 1000
    await rm.edit(f"Pong!\n{time_taken_s:.3f} ms")


@client.on(events.NewMessage(pattern="^/telegraph$"))
async def telegraph(event):
        if event.reply_to_msg_id:
            reply_message = await event.get_reply_message()
            if reply_message.media:
                downloaded_file_name = await client.download_media(reply_message)
                response = post("https://telegra.ph/upload", files={"file": ("file.png", open(downloaded_file_name, "rb"))})
                remove(downloaded_file_name)
                await client.send_message(event.chat_id, f"**Link:** https://telegra.ph{response.json()[0]['src']}", reply_to=event.reply_to_msg_id)
            else:
                await client.send_message(event.chat_id, "Bir ≈ü…ôkil…ô cavab verin", reply_to=event.reply_to_msg_id)
        else:
            await client.send_message(event.chat_id, "Bir ≈ü…ôkil…ô cavab verin", reply_to=event.reply_to_msg_id)




@app.on_message(filters.command("pin"))
async def pin(_, message: Message):
    if not message.reply_to_message:
        return
    args = message.text.lower().split()
    notify = not any(arg in args for arg in ('loud', 'notify'))
    await message.reply_to_message.pin(disable_notification=notify)

@app.on_message(filters.command("unpin"))
async def unpin(_, message: Message):
    if not message.reply_to_message:
        return
    await message.reply_to_message.unpin()



ABISHNOIX = "https://telegra.ph/file/44d9457217353f7f955b8.jpg"


@app.on_message(filters.command(["alive"]) & filters.user(OWNER_ID))
async def alive(_, message):
    await message.reply_photo(
        photo=ABISHNOIX,
        caption=f"""‚ú® **@OldMultiBot AKTƒ∞VDƒ∞R {message.from_user.mention},**

**BOT SAHƒ∞Bƒ∞  : [TEAMABASOF](https://t.me/AnonyumAz)**
**·¥ò è·¥õ ú·¥è…¥ ·¥†·¥á ÄÍú±…™·¥è…¥ :** `{y()}`
**·¥õ·¥á ü·¥á·¥õ ú·¥è…¥ ·¥†·¥á ÄÍú±…™·¥è…¥ :** `{s}`
**·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç ·¥†·¥á ÄÍú±…™·¥è…¥ :** `{z}`
** ô·¥è·¥õ ·¥†·¥á ÄÍú±…™·¥è…¥ :** `1.0`
""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "‚Ä¢üé¥ KANALIM‚Ä¢", url="https://t.me/TEAMABASOFco√ß"
                    ),
                    InlineKeyboardButton(
                        "‚Ä¢üìÇ APK‚Ä¢", url="https://t.me/texnoapk1"
                    ),
                ]
            ]
        ),
    )


@app.on_message(filters.command("sehid"))
async def commit(_, message):
    await message.reply_text((await random_line('AykhanPro/txt/sehid.txt')))
				
@app.on_message(filters.command("meslehet") & ~filters.edited)
async def meslehet(_, message):
    await message.reply_text((await random_line('AykhanPro/txt/meslehet.txt')))


@app.on_message(filters.command("anekdod"))
async def anekdod(_, message):
    await message.reply_text((await random_line('AykhanPro/txt/anekdod.txt')))

# Dc Komutu ƒ∞cin Olan Buttonlar
def d_or_c(user_id):
	BUTTON = [[InlineKeyboardButton(text="? Doƒüruluk", callback_data = " ".join(["d_data",str(user_id)]))]]
	BUTTON += [[InlineKeyboardButton(text="?? Cesaret", callback_data = " ".join(["c_data",str(user_id)]))]]
	return InlineKeyboardMarkup(BUTTON)

# Dc Komutunu Olu≈üturalƒ±m
@app.on_message(filters.command("dc"))
async def _(client, message):
	user = message.from_user

	await message.reply_text(text="{} ƒ∞stediƒüin Soru Tipini Se√ß!".format(user.mention),
		reply_markup=d_or_c(user.id)
		)

# Buttonlarƒ±mƒ±zƒ± Yetkilendirelim
@app.on_callback_query()
async def _(client, callback_query):
	d_soru=random.choice(D_Lƒ∞ST) # Random Bir Doƒüruluk Sorusu Se√ßelim
	c_soru=random.choice(C_Lƒ∞ST) # Random Bir Cesaret Sorusu Se√ßelim
	user = callback_query.from_user # Kullanƒ±cƒ±n Kimliƒüini Alalƒ±m

	c_q_d, user_id = callback_query.data.split() # Buttonlarƒ±mƒ±zƒ±n Komutlarƒ±nƒ± Alalƒ±m

	# Sorunun Sorulmasƒ±nƒ± ƒ∞steyen Ki≈üinin Komutu Kullanan Kullanƒ±cƒ± Olup Olmadƒ±ƒüƒ±nƒ± Kontrol Edelim
	if str(user.id) == str(user_id):
		# Kullanƒ±cƒ±nƒ±n Doƒüruluk Sorusu ƒ∞stemi≈ü ƒ∞se Bu Kƒ±sƒ±m Calƒ±≈üƒ±r
		if c_q_d == "d_data":
			await callback_query.answer(text="Doƒüruluq Sorusu ƒ∞st…ôdiniz", show_alert=False) # ƒ∞lk Ekranda Uyarƒ± Olarak G√∂sterelim
			await client.delete_messages(
				chat_id=callback_query.message.chat.id,
				message_ids=callback_query.message.message_id) # Eski Mesajƒ± Silelim

			await callback_query.message.reply_text("**{user} Doƒüruluq Sorusu ƒ∞st…ôdi:** __{d_soru}__".format(user=user.mention, d_soru=d_soru)) # Sonra Kullanƒ±cƒ±yƒ± Etiketleyerek Sorusunu G√∂nderelim
			return

		if c_q_d == "c_data":
			await callback_query.answer(text="C…ôsar…ôt Sorusu ƒ∞st…ôdiniz", show_alert=False)
			await client.delete_messages(
				chat_id=callback_query.message.chat.id,
				message_ids=callback_query.message.message_id)
			await callback_query.message.reply_text("**{user} C…ôsar…ôt Sorusu ƒ∞st…ôdi:** __{c_soru}__".format(user=user.mention, c_soru=c_soru))
			return


	# Buttonumuza Tƒ±klayan Kisi Komut Calƒ±≈ütƒ±ran Ki≈üi Deƒüil ƒ∞se Uyarƒ± G√∂sterelim
	else:
		await callback_query.answer(text="…ômiri isdifade ed…ôn ki≈üi S…ôn Deyils…ôn!!", show_alert=False)
		return

############################
    # Sudo islemleri #
@app.on_message(filters.command("cekle"))
async def _(client, message):
  global MOD
  user = message.from_user
  
  if user.id not in OWNER_ID:
    await message.reply_text("**[?]** **S…ôn botda Sudo deyils…ôn!!**")
    return
  MOD="cekle"
  await message.reply_text("**[?]** **∆èlav…ô etm…ôk isd…ôdiyiniz c…ôsar…ôt sualƒ±nƒ± yazƒ±n!**")
  
@app.on_message(filters.command("dekle"))
async def _(client, message):
  global MOD
  user = message.from_user
  
  if user.id not in OWNER_ID:
    await message.reply_text("**[?]** **S…ôn botda Sudo deyils…ôn!!**")
    return
  MOD="cekle"
  await message.reply_text("**[?]** **∆èlav…ô etm…ôk isd…ôdiyiniz c…ôsar…ôt sualƒ±nƒ± yazƒ±n!**")

@app.on_message(filters.private)
async def _(client, message):
  global MOD
  global C_Lƒ∞ST
  global D_Lƒ∞ST
  
  user = message.from_user
  
  if user.id in OWNER_ID:
    if MOD=="cekle":
      C_Lƒ∞ST.append(str(message.text))
      MOD=None
      await message.reply_text("**[?]** __M…ôtin C…ôsar…ôt Sualƒ± Olaraq ∆èlav…ô edildi!__")
      return
    if MOD=="dekle":
      C_Lƒ∞ST.append(str(message.text))
      MOD=None
      await message.reply_text("**[?]** __M…ôtin Doƒüruluq Sualƒ± Olaraq ∆èlav…ô edildi!__")
      return


#Cahildi carbon code


aiohttpsession = ClientSession()


async def get_http_status_code(url: str) -> int:
    async with aiohttpsession.head(url) as resp:
        return resp.status
    

async def make_carbon(code):
    url = "https://carbonara.vercel.app/api/cook"
    async with aiohttpsession.post(url, json={"code": code}) as resp:
        image = BytesIO(await resp.read())
    image.name = "carbon.png"
    return image

@app.on_message(filters.command("carbon"))
async def carbon_func(bot: app, msg: Message):
    m = await msg.reply_text("`Hazƒ±rlanƒ±r`")
    carbon = await make_carbon(msg.reply_to_message.text)
    await m.edit("`G√∂nd…ôrilir`")
    await bot.send_photo(msg.chat.id, photo=carbon)
    await m.delete()
    carbon.close()



@app.on_message(filters.command("ping"))
async def ping(_, message):
    start_t = time.time()
    rm = await message.reply_text("...")
    end_t = time.time()
    time_taken_s = (end_t - start_t) * 1000
    await rm.edit(f"Pong!\n{time_taken_s:.3f} ms")




@app.on_message(filters.command("tema"))
async def tema(app: Client, msg: Message):
    await msg.reply(random.choice(temalar))



@app.on_message(filters.private & filters.command(["font"]))
async def style_buttons(c, m, cb=False):
    buttons = [[
        InlineKeyboardButton('ùöÉùö¢ùöôùöéùö†ùöõùöíùöùùöéùöõ', callback_data='style+typewriter'),
        InlineKeyboardButton('ùïÜùï¶ùï•ùïùùïöùïüùïñ', callback_data='style+outline'),
        InlineKeyboardButton('ùêíùêûùê´ùê¢ùêü', callback_data='style+serif'),
        ],[
        InlineKeyboardButton('ùë∫ùíÜùíìùíäùíá', callback_data='style+bold_cool'),
        InlineKeyboardButton('ùëÜùëíùëüùëñùëì', callback_data='style+cool'),
        InlineKeyboardButton('S·¥ç·¥Ä ü ü C·¥Ä·¥òs', callback_data='style+small_cap'),
        ],[
        InlineKeyboardButton('ùìàùí∏ùìáùíæùìÖùìâ', callback_data='style+script'),
        InlineKeyboardButton('ùìºùì¨ùìªùì≤ùìπùìΩ', callback_data='style+script_bolt'),
        InlineKeyboardButton('·µó‚Å±‚Åø ∏', callback_data='style+tiny'),
        ],[
        InlineKeyboardButton('·ëïO·ó∞I·ëï', callback_data='style+comic'),
        InlineKeyboardButton('ùó¶ùóÆùóªùòÄ', callback_data='style+sans'),
        InlineKeyboardButton('ùôéùôñùô£ùô®', callback_data='style+slant_sans'),
        ],[
        InlineKeyboardButton('ùòöùò¢ùòØùò¥', callback_data='style+slant'),
        InlineKeyboardButton('ùñ≤ùñ∫ùóáùóå', callback_data='style+sim'),
        InlineKeyboardButton('‚í∏Ô∏é‚íæÔ∏é‚ìáÔ∏é‚í∏Ô∏é‚ìÅÔ∏é‚í∫Ô∏é‚ìàÔ∏é', callback_data='style+circles')
        ],[
        InlineKeyboardButton('üÖíÔ∏éüÖòÔ∏éüÖ°Ô∏éüÖíÔ∏éüÖõÔ∏éüÖîÔ∏éüÖ¢Ô∏é', callback_data='style+circle_dark'),
        InlineKeyboardButton('ùîäùî¨ùî±ùî•ùî¶ùî†', callback_data='style+gothic'),
        InlineKeyboardButton('ùï≤ùñîùñôùñçùñéùñà', callback_data='style+gothic_bolt'),
        ],[
        InlineKeyboardButton('CÕ°ÕúlÕ°ÕúoÕ°ÕúuÕ°ÕúdÕ°ÕúsÕ°Õú', callback_data='style+cloud'),
        InlineKeyboardButton('HÃÜÃàaÃÜÃàpÃÜÃàpÃÜÃàyÃÜÃà', callback_data='style+happy'),
        InlineKeyboardButton('SÃëÃàaÃëÃàdÃëÃà', callback_data='style+sad'),
        ],[
        InlineKeyboardButton('Next ‚û°Ô∏è', callback_data="nxt")
    ]]
    if not cb:
        if ' ' in m.text:
            title = m.text.split(" ", 1)[1]
            await m.reply_text(title, reply_markup=InlineKeyboardMarkup(buttons), reply_to_message_id=m.id)                     
        else:
            await m.reply_text(text="ƒ∞st…ônil…ôn m…ôtni daxil edin M…ôs…ôl…ôn:- `/font [m…ôtn]`")    
    else:
        await m.answer()
        await m.message.edit_reply_markup(InlineKeyboardMarkup(buttons))


@app.on_callback_query(filters.regex('^nxt'))
async def nxt(c, m):
    if m.data == "nxt":
        buttons = [[
            InlineKeyboardButton('üá∏‚Ääüáµ‚Ääüá™‚Ääüá®‚ÄäüáÆ‚Ääüá¶‚Ääüá±‚Ää', callback_data='style+special'),
            InlineKeyboardButton('üÖÇüÖÄüÖÑüÑ∞üÖÅüÑ¥üÖÇ', callback_data='style+squares'),
            InlineKeyboardButton('üÜÇÔ∏éüÜÄÔ∏éüÜÑÔ∏éüÖ∞Ô∏éüÜÅÔ∏éüÖ¥Ô∏éüÜÇÔ∏é', callback_data='style+squares_bold'),
            ],[
            InlineKeyboardButton('Í™ñÍ™Ä·¶îÍ™ñÍ™∂Í™ä·•¥ùì≤Í™ñ', callback_data='style+andalucia'),
            InlineKeyboardButton('Áà™ÂçÇÂá†·òúÂçÇ', callback_data='style+manga'),
            InlineKeyboardButton('SÃætÃæiÃænÃækÃæyÃæ', callback_data='style+stinky'),
            ],[
            InlineKeyboardButton('BÕ¶Ã•uÕ¶Ã•bÕ¶Ã•bÕ¶Ã•lÕ¶Ã•eÕ¶Ã•sÕ¶Ã•', callback_data='style+bubbles'),
            InlineKeyboardButton('UÕünÕüdÕüeÕürÕülÕüiÕünÕüeÕü', callback_data='style+underline'),
            InlineKeyboardButton('ÍííÍçèÍÄ∑Íå©ÍåÉÍÄéÍÅÖ', callback_data='style+ladybug'),
            ],[
            InlineKeyboardButton('R“âa“ây“âs“â', callback_data='style+rays'),
            InlineKeyboardButton('B“ài“àr“àd“às“à', callback_data='style+birds'),
            InlineKeyboardButton('SÃ∏lÃ∏aÃ∏sÃ∏hÃ∏', callback_data='style+slash'),
            ],[
            InlineKeyboardButton('s‚É†t‚É†o‚É†p‚É†', callback_data='style+stop'),
            InlineKeyboardButton('SÕÜÃ∫kÕÜÃ∫yÕÜÃ∫lÕÜÃ∫iÕÜÃ∫nÕÜÃ∫eÕÜÃ∫', callback_data='style+skyline'),
            InlineKeyboardButton('AÕérÕérÕéoÕéwÕésÕé', callback_data='style+arrows'),
            ],[
            InlineKeyboardButton('·ã™·àÄ·ä≠·âø·äê', callback_data='style+qvnes'),
            InlineKeyboardButton('SÃ∂tÃ∂rÃ∂iÃ∂kÃ∂eÃ∂', callback_data='style+strike'),
            InlineKeyboardButton('F‡ºôr‡ºôo‡ºôz‡ºôe‡ºôn‡ºô', callback_data='style+frozen')
            ],[
            InlineKeyboardButton('‚¨ÖÔ∏è Back', callback_data='nxt+0')
        ]]
        await m.answer()
        await m.message.edit_reply_markup(InlineKeyboardMarkup(buttons))
    else:
        await style_buttons(c, m, cb=True)


@app.on_callback_query(filters.regex('^style'))
async def style(c, m):
    await m.answer()
    cmd, style = m.data.split('+')

    if style == 'typewriter':
        cls = Fonts.typewriter
    if style == 'outline':
        cls = Fonts.outline
    if style == 'serif':
        cls = Fonts.serief
    if style == 'bold_cool':
        cls = Fonts.bold_cool
    if style == 'cool':
        cls = Fonts.cool
    if style == 'small_cap':
        cls = Fonts.smallcap
    if style == 'script':
        cls = Fonts.script
    if style == 'script_bolt':
        cls = Fonts.bold_script
    if style == 'tiny':
        cls = Fonts.tiny
    if style == 'comic':
        cls = Fonts.comic
    if style == 'sans':
        cls = Fonts.san
    if style == 'slant_sans':
        cls = Fonts.slant_san
    if style == 'slant':
        cls = Fonts.slant
    if style == 'sim':
        cls = Fonts.sim
    if style == 'circles':
        cls = Fonts.circles
    if style == 'circle_dark':
        cls = Fonts.dark_circle
    if style == 'gothic':
        cls = Fonts.gothic
    if style == 'gothic_bolt':
        cls = Fonts.bold_gothic
    if style == 'cloud':
        cls = Fonts.cloud
    if style == 'happy':
        cls = Fonts.happy
    if style == 'sad':
        cls = Fonts.sad
    if style == 'special':
        cls = Fonts.special
    if style == 'squares':
        cls = Fonts.square
    if style == 'squares_bold':
        cls = Fonts.dark_square
    if style == 'andalucia':
        cls = Fonts.andalucia
    if style == 'manga':
        cls = Fonts.manga
    if style == 'stinky':
        cls = Fonts.stinky
    if style == 'bubbles':
        cls = Fonts.bubbles
    if style == 'underline':
        cls = Fonts.underline
    if style == 'ladybug':
        cls = Fonts.ladybug
    if style == 'rays':
        cls = Fonts.rays
    if style == 'birds':
        cls = Fonts.birds
    if style == 'slash':
        cls = Fonts.slash
    if style == 'stop':
        cls = Fonts.stop
    if style == 'skyline':
        cls = Fonts.skyline
    if style == 'arrows':
        cls = Fonts.arrows
    if style == 'qvnes':
        cls = Fonts.rvnes
    if style == 'strike':
        cls = Fonts.strike
    if style == 'frozen':
        cls = Fonts.frozen

    r, oldtxt = m.message.reply_to_message.text.split(None, 1) 
    new_text = cls(oldtxt)            
    try:
        await m.message.edit_text(f"`{new_text}`\n\nüëÜ Kopyalamaq √º√ß√ºn kikl…ôyin", reply_markup=m.message.reply_markup)
    except Exception as e:
        print(e)


headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36",
    "content-type": "application/json",
}

#Pastebins
async def p_paste(message, extension=None):
    siteurl = "https://pasty.lus.pm/api/v1/pastes"
    data = {"content": message}
    try:
        response = requests.post(url=siteurl, data=json.dumps(data), headers=headers)
    except Exception as e:
        return {"error": str(e)}
    if response.ok:
        response = response.json()
        purl = (
            f"https://pasty.lus.pm/{response['id']}.{extension}"
            if extension
            else f"https://pasty.lus.pm/{response['id']}.txt"
        )
        return {
            "url": purl,
            "raw": f"https://pasty.lus.pm/{response['id']}/raw",
            "bin": "Pasty",
        }
    return {"error": "Unable to reach pasty.lus.pm"}



@app.on_message(filters.command(["tgpaste", "pasty", "paste"]))
async def pasty(client, message):
    pablo = await message.reply_text("`G√∂zl…ôyin...`")
    tex_t = message.text
    if ' ' in message.text:
        message_s = message.text.split(" ", 1)[1]
    elif message.reply_to_message:
        message_s = message.reply_to_message.text
    else:
        await message.reply("daxil olunmur m…ôtin…ô yanitlayaraq yazin/paste yanitla")
    if not tex_t:
        if not message.reply_to_message:
            await pablo.edit("`Yalnƒ±z m…ôtin v…ô s…ôn…ôdl…ôr d…ôsd…ôkl…ônir.`")
            return
        if not message.reply_to_message.text:
            file = await message.reply_to_message.download()
            m_list = open(file, "r").read()
            message_s = m_list
            os.remove(file)
        elif message.reply_to_message.text:
            message_s = message.reply_to_message.text

    ext = "py"
    x = await p_paste(message_s, ext)
    p_link = x["url"]
    p_raw = x["raw"]

    pasted = f"**Uƒüurla Pasty yapƒ±≈üdƒ±rlƒ±dƒ±**\n\n**Link:** ‚Ä¢ [Click here]({p_link})\n\n**Raw Link:** ‚Ä¢ [Click here]({p_raw})"
    await pablo.edit(pasted, disable_web_page_preview=True)

HERF = (
    "A ‚ù§Ô∏è",
    "B ü©∂",
    "C ‚ù§Ô∏è‚Äçüî•",
    "D üíú",
    "R üíö",
    "S üíõ",
    "F ü§é",
    "D üñ§",
    "G ü©∑",
    "H ü©∂",
    "K ü©µ",
    "V üíò",
    "E üíü",
)


@app.on_message(filters.command("sevgi"))
async def runs(_, message):
    """ /runs strings """
    effective_string = random.choice(HERF)
    if message.reply_to_message:
        await message.reply_to_message.reply_text(effective_string)
    else:
        await message.reply_text(effective_string)


MAL = (
    f'{message.from_user.mention} S∆èN 100% MALSAN',
    f'{message.from_user.mention} S∆èN 100% MALSAN',
)



@app.on_message(filters.command("mal"))
async def runs(_, message):
    """ /runs strings """
    effective_string = random.choice(MAL)
    if message.reply_to_message:
        await message.reply_to_message.reply_text(effective_string)
    else:
        await message.reply_text(effective_string)







#@(events.NewMessage(pattern='/reklam'))
#async def handler(event):	
 #    await event.reply('ü§ñ [USTA Tag Bot](http://t.me/UstaTagbot)-unda Reklam Almaq √úz√ß√ºn […¥·¥Ä·¥ã ú…™·¥Ö ·¥ús·¥õ·¥Ä ¬¶ üáßüáªü¶Ö](https://t.me/UstaNakhid)-il…ô ”òlaq”ô Saxlayƒ±n.')
 

print(">> Bot i≈ül…ôyir narahat olmayƒ±n. @edalet_22 M…ôlumat almaq √º√ß√ºn <<")
app.start()
client.run_until_disconnected()
